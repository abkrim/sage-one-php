    public function testSave()
    {
        $this->verifySave(Supplier::class, function ($model) {
            $model->name = 'sample string 1';
            $model->category->description =  'sample string 1';
            $model->category->id = 2;
            $model->category->modified = '2017-07-04';
            $model->category->created = '2017-07-04';
            $model->taxReference = 'sample string 2';
            $model->contactName = 'sample string 3';
            $model->telephone = 'sample string 4';
            $model->fax = 'sample string 5';
            $model->mobile = 'sample string 6';
            $model->email = 'sample string 7';
            $model->webAddress = 'sample string 8';
            $model->active = true;
            $model->balance = 10.0;
            $model->creditLimit = 11.0;
            $model->postalAddress01 = 'sample string 12';
            $model->postalAddress02 = 'sample string 13';
            $model->postalAddress03 = 'sample string 14';
            $model->postalAddress04 = 'sample string 15';
            $model->postalAddress05 = 'sample string 16';
            $model->deliveryAddress01 = 'sample string 17';
            $model->deliveryAddress02 = 'sample string 18';
            $model->deliveryAddress03 = 'sample string 19';
            $model->deliveryAddress04 = 'sample string 20';
            $model->deliveryAddress05 = 'sample string 21';
            $model->autoAllocateToOldestInvoice = true;
            $model->textField1 = 'sample string 22';
            $model->textField2 = 'sample string 23';
            $model->textField3 = 'sample string 24';
            $model->numericField1 = 1.0;
            $model->numericField2 = 1.0;
            $model->numericField3 = 1.0;
            $model->yesNoField1 = true;
            $model->yesNoField2 = true;
            $model->yesNoField3 = true;
            $model->dateField1 = '2017-07-04';
            $model->dateField2 = '2017-07-04';
            $model->dateField3 = '2017-07-04';
            $model->modified = '2017-07-04';
            $model->created = '2017-07-04';
            $model->businessRegistrationNumber = 'sample string 29';
            $model->RMCDApprovalNumber = 'sample string 30';
            $model->taxStatusVerified = '2017-07-04';
            $model->currencyId = 1;
            $model->currencySymbol = 'sample string 31';
            $model->hasActivity = true;
            $model->defaultDiscountPercentage = 1.0;
            $model->defaultTaxTypeId = 1;
            $model->defaultTaxType->id = 1;
            $model->defaultTaxType->name = 'sample string 2';
            $model->defaultTaxType->percentage = 3.1;
            $model->defaultTaxType->isDefault = true;
            $model->defaultTaxType->hasActivity = true;
            $model->defaultTaxType->isManualTax = true;
            $model->defaultTaxType->created = '2017-07-04';
            $model->defaultTaxType->modified = '2017-07-04';
            $model->dueDateMethodId = 1;
            $model->dueDateMethodValue = 1;
            $model->id = 33;
        }, function ($savedModel) {
            $this->assertEquals($savedModel->name, 'sample string 1');
            $this->assertEquals($savedModel->category->description, 'sample string 1');
            $this->assertEquals($savedModel->category->id, 2);
            $this->assertEquals($savedModel->category->modified->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->category->created->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->taxReference, 'sample string 2');
            $this->assertEquals($savedModel->contactName, 'sample string 3');
            $this->assertEquals($savedModel->telephone, 'sample string 4');
            $this->assertEquals($savedModel->fax, 'sample string 5');
            $this->assertEquals($savedModel->mobile, 'sample string 6');
            $this->assertEquals($savedModel->email, 'sample string 7');
            $this->assertEquals($savedModel->webAddress, 'sample string 8');
            $this->assertTrue($savedModel->active);
            $this->assertEquals($savedModel->balance, 10.0);
            $this->assertEquals($savedModel->creditLimit, 11.0);
            $this->assertEquals($savedModel->postalAddress01, 'sample string 12');
            $this->assertEquals($savedModel->postalAddress02, 'sample string 13');
            $this->assertEquals($savedModel->postalAddress03, 'sample string 14');
            $this->assertEquals($savedModel->postalAddress04, 'sample string 15');
            $this->assertEquals($savedModel->postalAddress05, 'sample string 16');
            $this->assertEquals($savedModel->deliveryAddress01, 'sample string 17');
            $this->assertEquals($savedModel->deliveryAddress02, 'sample string 18');
            $this->assertEquals($savedModel->deliveryAddress03, 'sample string 19');
            $this->assertEquals($savedModel->deliveryAddress04, 'sample string 20');
            $this->assertEquals($savedModel->deliveryAddress05, 'sample string 21');
            $this->assertTrue($savedModel->autoAllocateToOldestInvoice);
            $this->assertEquals($savedModel->textField1, 'sample string 22');
            $this->assertEquals($savedModel->textField2, 'sample string 23');
            $this->assertEquals($savedModel->textField3, 'sample string 24');
            $this->assertEquals($savedModel->numericField1, 1.0);
            $this->assertEquals($savedModel->numericField2, 1.0);
            $this->assertEquals($savedModel->numericField3, 1.0);
            $this->assertTrue($savedModel->yesNoField1);
            $this->assertTrue($savedModel->yesNoField2);
            $this->assertTrue($savedModel->yesNoField3);
            $this->assertEquals($savedModel->dateField1->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->dateField2->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->dateField3->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->modified->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->created->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->businessRegistrationNumber, 'sample string 29');
            $this->assertEquals($savedModel->RMCDApprovalNumber, 'sample string 30');
            $this->assertEquals($savedModel->taxStatusVerified->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->currencyId, 1);
            $this->assertEquals($savedModel->currencySymbol, 'sample string 31');
            $this->assertTrue($savedModel->hasActivity);
            $this->assertEquals($savedModel->defaultDiscountPercentage, 1.0);
            $this->assertEquals($savedModel->defaultTaxTypeId, 1);
            $this->assertEquals($savedModel->defaultTaxType->id, 1);
            $this->assertEquals($savedModel->defaultTaxType->name, 'sample string 2');
            $this->assertEquals($savedModel->defaultTaxType->percentage, 3.1);
            $this->assertTrue($savedModel->defaultTaxType->isDefault);
            $this->assertTrue($savedModel->defaultTaxType->hasActivity);
            $this->assertTrue($savedModel->defaultTaxType->isManualTax);
            $this->assertEquals($savedModel->defaultTaxType->created->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->defaultTaxType->modified->format('Y-m-d'), '2017-07-04');
            $this->assertEquals($savedModel->dueDateMethodId, 1);
            $this->assertEquals($savedModel->dueDateMethodValue, 1);
            $this->assertEquals($savedModel->id, 33);
        });
    }
}
